<span class='ListingHeader'>Line Addr Code Code Source</span>
   1 0000           ; WriteBCD: print a BCD number
   2 0000           ; Sigma16: https://jtod.github.io/home/Sigma16/  John O'Donnell, 2022
   3 0000           
   4 0000           ; This program illustrates how to print a binary coded decimal (BCD)
   5 0000           ; number, and how to write non-reentrant procedures with static local
   6 0000           ; data.
   7 0000           
   8 0000           ; The main program takes a BCD number 'decx' with 5 digits, converts
   9 0000           ; that to a string 'str', and prints the string.  It uses several
  10 0000           ; non-reentrant procedures, which are defined locally and use static
  11 0000           ; local data:
  12 0000           
  13 0000           ;   DecString -- converts a BCD number to a string
  14 0000           ;   AddDec -- adds two BCD numbers
  15 0000           
  16 0000           ;---------------------------------------------------------------------
  17 0000           ; Main program
  18 0000           
  19 0000           ; Convert BCD number to string
  20 0000 f100 0005      lea    R1,5[R0]               ; arg 1 := #digits in decx
  21 0002 f200 0010      lea    R2,decx[R0]            ; arg 2 := &decx
  22 0004 f300 0015      lea    R3,str[R0]             ; arg 3 := &str
  23 0006 fd06 001b      jal    R13,DecString[R0]      ; call DecString
  24 0008           
  25 0008           ; Write str
  26 0008 f100 0002      lea    R1,2[R0]               ; arg 1 := trap code write
  27 000a f200 0015      lea    R2,str[R0]             ; arg 2 := &str
  28 000c f300 0006      lea    R3,6[R0]               ; arg 3 := #chars (incl newline)
  29 000e c123           trap   R1,R2,R3               ; write
  30 000f           
  31 000f c000           trap   R0,R0,R0               ; terminate
  32 0010           
  33 0010           ; Data for main program
  34 0010           decx                               ; BCD number 26,394
  35 0010 0002           data   2
  36 0011 0009           data   9
  37 0012 0003           data   3
  38 0013 0000           data   0
  39 0014 0004           data   4
  40 0015           str                                ; an array of 5 words
  41 0015 0000           data   0
  42 0016 0000           data   0
  43 0017 0000           data   0
  44 0018 0000           data   0
  45 0019 0000           data   0
  46 001a           newline
  47 001a 000a           data   10                     ; Unicode character code for newline
  48 001b           
  49 001b           ;------------------------------------------------------------------------
  50 001b           ; Procedure DecString -- convert a BCD integer to string
  51 001b           ; Calling conventions
  52 001b           ;   R1 = k = number of words (digits) in BCD integer x
  53 001b           ;   R2 = xp = pointer to msb of x
  54 001b           ;   R3 = sp = pointer to string s
  55 001b           DecString
  56 001b f402 003a      store   R4,DecStringR4[R0]    ; save R4
  57 001d f502 003b      store   R5,DecStringR5[R0]    ; save R5
  58 001f f602 003c      store   R6,DecStringR6[R0]    ; save R6
  59 0021 f400 0001      lea     R4,1[R0]              ; R4 := constant 1
  60 0023 f500 0030      lea     R5,$0030[R0]          ; R5 := constant unicode '0'
  61 0025           DecStringLoop
  62 0025 4010           cmp     R1,R0                 ; compare k, 0
  63 0026 f004 0032      jumple  DecStringDone[R0]     ; if k &lt;= 0 then exit loop
  64 0028 f621 0000      load    R6,0[R2]              ; R6 := x[i]
  65 002a 0665           add     R6,R6,R5              ; R6 := unicode char for x[i]
  66 002b f632 0000      store   R6,0[R3]              ; s[i] := unicode char for x[i]
  67 002d 0224           add     R2,R2,R4              ; xp++
  68 002e 0334           add     R3,R3,R4              ; sp++
  69 002f 1114           sub     R1,R1,R4              ; k--
  70 0030 f003 0025      jump    DecStringLoop[R0]     ; goto DecStringLoop
  71 0032           DecStringDone
  72 0032 f401 003a      load    R4,DecStringR4[R0]    ; restore R4
  73 0034 f501 003b      load    R5,DecStringR5[R0]    ; restore R5
  74 0036 f601 003c      load    R6,DecStringR6[R0]    ; restore R6
  75 0038 f0d3 0000      jump    0[R13]                ; return
  76 003a           ; Data for DecString -- static allocation
  77 003a 0000      DecStringR4  data  0
  78 003b 0000      DecStringR5  data  0
  79 003c 0000      DecStringR6  data  0
  80 003d           ; End Procedure DecString
  81 003d           

<span class='ListingHeader'>Symbol table</span>
<span class='ListingHeader'>Name        Val Org Mov  Def Used</span>
DecString  001b Loc Rel   55  23
DecStringDone0032 Loc Rel   71  63
DecStringLoop0025 Loc Rel   61  70
DecStringR4003a Loc Rel   77  56,72
DecStringR5003b Loc Rel   78  57,73
DecStringR6003c Loc Rel   79  58,74
decx       0010 Loc Rel   34  21
newline    001a Loc Rel   46  
str        0015 Loc Rel   40  22,27