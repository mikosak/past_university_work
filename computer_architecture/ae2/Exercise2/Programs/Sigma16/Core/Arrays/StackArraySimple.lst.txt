<span class='ListingHeader'>Line Addr Code Code Source</span>
   1 0000           ; StackArraySimple: stack implemented using array without error checking
   2 0000           ; Sigma16: https://jtod.github.io/home/Sigma16/  John O'Donnell, 2022
   3 0000           
   4 0000           ; This is a simple implementation of a stack using an array; there is
   5 0000           ; no error checking and no saving/restoring of registers.
   6 0000           
   7 0000           ;---------------------------------------------------------------------
   8 0000           ; Main program
   9 0000           
  10 0000           ; push 'a'  -- stack = [a]
  11 0000 f101 0044        load   R1,char_a[R0]    ; R1 = character to push
  12 0002 fe06 002c        jal    R14,push[R0]     ; push(R1)
  13 0004           
  14 0004           ; push 'b'  -- stack = [a,b]
  15 0004 f101 0045        load   R1,char_b[R0]    ; R1 = character to push
  16 0006 fe06 002c        jal    R14,push[R0]     ; push(R1)
  17 0008           
  18 0008           ; push 'c'  -- stack = [a,b,c]
  19 0008 f101 0046        load   R1,char_c[R0]    ; R1 = character to push
  20 000a fe06 002c        jal    R14,push[R0]     ; push(R1)
  21 000c           
  22 000c           ; pop and print  -- print c, stack = [a,b]
  23 000c fe06 0037        jal    R14,pop[R0]      ; R1 := pop()
  24 000e fe06 0021        jal    R14,printx[R0]   ; print character in R1
  25 0010           
  26 0010           ; push 'd'  -- stack = [a,b,d]
  27 0010 f101 0047        load   R1,char_d[R0]    ; R1 = character to push
  28 0012 fe06 002c        jal    R14,push[R0]     ; push(R1)
  29 0014           
  30 0014           ; pop and print  -- print d, stack = [a,b]
  31 0014 fe06 0037        jal    R14,pop[R0]      ; R1 := pop()
  32 0016 fe06 0021        jal    R14,printx[R0]   ; print character in R1
  33 0018           
  34 0018           ; pop and print  -- print b, stack = [a]
  35 0018 fe06 0037        jal    R14,pop[R0]      ; R1 := pop()
  36 001a fe06 0021        jal    R14,printx[R0]   ; print character in R1
  37 001c           
  38 001c           ; pop and print  -- print a, stack = []
  39 001c fe06 0037        jal    R14,pop[R0]      ; R1 := pop()
  40 001e fe06 0021        jal    R14,printx[R0]   ; print character in R1
  41 0020           
  42 0020           ; finish
  43 0020 c000             trap   R0,R0,R0   ; request terminate
  44 0021           
  45 0021           ;---------------------------------------------------------------------
  46 0021           ; Input/Output
  47 0021           
  48 0021           ; procedure printx
  49 0021           printx
  50 0021 f102 0042         store  R1,x[R0]   ; x := R1 (result of pop)
  51 0023 f100 0002         lea    R1,2[R0]   ; trap code for write
  52 0025 f200 0042         lea    R2,x[R0]   ; address of string to write
  53 0027 f300 0002         lea    R3,2[R0]   ; length of string to write
  54 0029 c123              trap   R1,R2,R3   ; request the write operation
  55 002a f0e3 0000         jump   0[R14]     ; return
  56 002c           
  57 002c           ;---------------------------------------------------------------------
  58 002c           ; Implementation of the stack
  59 002c           
  60 002c           ; Representation of stack
  61 002c           ;   stLim  = maximum number of elements allowed
  62 002c           ;   stTop  = current number of elements
  63 002c           ;   stack  = first element of array representing the stack
  64 002c           
  65 002c           ; procedure push (x)
  66 002c           ; Argument x is in R1, return address in R14
  67 002c           ;   stack[stTop] := x; stTop := stTop + 1
  68 002c           
  69 002c f201 004a push    load   R2,stTop[R0]   ; R2 := stTop
  70 002e f122 004b         store  R1,stack[R2]   ; stack[stTop] := x
  71 0030 f300 0001         lea    R3,1[R0]       ; R3 := constant 1
  72 0032 0223              add    R2,R2,R3       ; R2 := stTop + 1
  73 0033 f202 004a         store  R2,stTop[R0]   ; stTop := stTop + 1
  74 0035 f0e3 0000         jump   0[R14]         ; return
  75 0037           
  76 0037           ; function pop()
  77 0037           ; Result is returned in R1, return address in R14
  78 0037           ;   stTop := stTop - 1; x := stack[stTop]
  79 0037           
  80 0037 f201 004a pop     load   R2,stTop[R0]   ; R2 := stTop
  81 0039 f300 0001         lea    R3,1[R0]       ; R3 := constant 1
  82 003b 1223              sub    R2,R2,R3       ; R2 := stTop - 1
  83 003c f121 004b         load   R1,stack[R2]   ; R1 := stack[stTop-1]
  84 003e f202 004a         store  R2,stTop[R0]   ; stTop := stTop - 1
  85 0040 f0e3 0000         jump   0[R14]         ; return
  86 0042           
  87 0042           ;---------------------------------------------------------------------
  88 0042           ; Data
  89 0042           
  90 0042           ; x is the string that will be printed
  91 0042 0000      x       data   0      ; dummy initial value
  92 0043 000a              data  10      ; character code for newline
  93 0044           
  94 0044           ; Unicode character definitions
  95 0044 0061      char_a  data   97     ; character code for 'a'
  96 0045 0062      char_b  data   98     ; character code for 'b'
  97 0046 0063      char_c  data   99     ; character code for 'c'
  98 0047 0064      char_d  data  100     ; character code for 'd'
  99 0048 0065      char_e  data  101     ; character code for 'e'
 100 0049           
 101 0049           ; Stack
 102 0049 0064      stLim   data   100     ; maximum number of elements in stack
 103 004a 0000      stTop   data     0     ; current number of elements
 104 004b 0000      stack   data     0     ; first location in array of elements
 105 004c           ; the next stLim-1 words are reserved for the stack
 106 004c           

<span class='ListingHeader'>Symbol table</span>
<span class='ListingHeader'>Name        Val Org Mov  Def Used</span>
char_a     0044 Loc Rel   95  11
char_b     0045 Loc Rel   96  15
char_c     0046 Loc Rel   97  19
char_d     0047 Loc Rel   98  27
char_e     0048 Loc Rel   99  
pop        0037 Loc Rel   80  23,31,35,39
printx     0021 Loc Rel   49  24,32,36,40
push       002c Loc Rel   69  12,16,20,28
stLim      0049 Loc Rel  102  
stTop      004a Loc Rel  103  69,73,80,84
stack      004b Loc Rel  104  70,83
x          0042 Loc Rel   91  50,52