<span class='ListingHeader'>Line Addr Code Code Source</span>
   1 0000           ; ArrayMax: find maximum element of an array
   2 0000           ; Sigma16: https://jtod.github.io/home/Sigma16/  John O'Donnell, 2022
   3 0000           
   4 0000           ;---------------------------------------------------------------------
   5 0000           ; The program finds the maximum element of an array.  It is given
   6 0000           ;   *  a natural number n, assume n>0
   7 0000           ;   *  an n-element array x[0], x[1], ..., x[n-1]
   8 0000           ; and it calculates
   9 0000           ;   * max = the maximum element of x
  10 0000           
  11 0000           ; Since n>0, the array x contains at least one element, and a maximum
  12 0000           ; element is guaranteed to exist.
  13 0000           
  14 0000           ;---------------------------------------------------------------------
  15 0000           ; High level algorithm
  16 0000           
  17 0000           ;   max := x[0]
  18 0000           ;   for i := 1 to n-1 step 1
  19 0000           ;       if x[i] > max
  20 0000           ;         then max := x[i]
  21 0000           
  22 0000           ;---------------------------------------------------------------------
  23 0000           ; Low level algorithm
  24 0000           
  25 0000           ;     max := x[0]
  26 0000           ;     i := 1
  27 0000           ; forloop:
  28 0000           ;     if i >= n then goto done
  29 0000           ;     if x[i] &lt;= max then goto skip
  30 0000           ;     max := x[i]
  31 0000           ; skip:
  32 0000           ;     i := i + 1
  33 0000           ;     goto forloop
  34 0000           ; done:
  35 0000           ;     terminate
  36 0000           
  37 0000           ;---------------------------------------------------------------------
  38 0000           ; Assembly language
  39 0000           
  40 0000           ; Register usage
  41 0000           ;   R1 = constant 1
  42 0000           ;   R2 = n
  43 0000           ;   R3 = i
  44 0000           ;   R4 = max
  45 0000           
  46 0000           ; Initialise
  47 0000 f100 0001        lea    R1,1[R0]         ; R1 = constant 1
  48 0002 f201 0017        load   R2,n[R0]         ; R2 = n
  49 0004           ; max := x[0]
  50 0004 f401 0019        load   R4,x[R0]         ; R4 = max = x[0]
  51 0006           ; i := 1
  52 0006 f300 0001        lea    R3,1[R0]         ; R3 = i = 1
  53 0008           
  54 0008           ; Top of loop, determine whether to remain in loop
  55 0008           forloop
  56 0008           ; if i >= n then goto done
  57 0008 4032             cmp    R3,R2            ; compare i, n
  58 0009 f404 0014        jumpge done[R0]         ; if i>=n then goto done
  59 000b           
  60 000b           ; if x[i] &lt;= max then goto else
  61 000b f531 0019        load   R5,x[R3]         ; R5 = x[i]
  62 000d 4054             cmp    R5,R4            ; compare x[i], max
  63 000e f004 0011        jumple skip[R0]         ; if x[i] &lt;= max then goto skip
  64 0010           
  65 0010           ; max := x[i]
  66 0010 0450             add   R4,R5,R0          ; max := x[i]
  67 0011           
  68 0011           skip
  69 0011           ; i := i + 1
  70 0011 0331             add    R3,R3,R1         ; i = i + 1
  71 0012           ; goto forloop
  72 0012 f003 0008        jump   forloop[R0]      ; go to top of forloop
  73 0014           
  74 0014           ; Exit from forloop
  75 0014 f402 0018 done   store R4,max[R0]        ; max = R4
  76 0016           ; terminate
  77 0016 c000             trap  R0,R0,R0          ; terminate
  78 0017           
  79 0017           ; Data area
  80 0017           ; With the following data, the expected result is 40 (0028)
  81 0017           
  82 0017 0006      n        data   6
  83 0018 0000      max      data   0
  84 0019 0012      x        data  18
  85 001a 0003               data   3
  86 001b 0015               data  21
  87 001c fffe               data  -2
  88 001d 0028               data  40
  89 001e 0019               data  25
  90 001f           

<span class='ListingHeader'>Symbol table</span>
<span class='ListingHeader'>Name        Val Org Mov  Def Used</span>
done       0014 Loc Rel   75  58
forloop    0008 Loc Rel   55  72
max        0018 Loc Rel   83  75
n          0017 Loc Rel   82  48
skip       0011 Loc Rel   68  63
x          0019 Loc Rel   84  50,61