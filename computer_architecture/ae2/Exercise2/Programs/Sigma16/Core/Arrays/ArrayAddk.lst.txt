<span class='ListingHeader'>Line Addr Code Code Source</span>
   1 0000           ; ArrayAddk: add k to each element of an array
   2 0000           ; Sigma16: https://jtod.github.io/home/Sigma16/  John O'Donnell, 2022
   3 0000           
   4 0000           ; Traverse an array and add constant k to each element
   5 0000           
   6 0000           ; An array x of n elements is defined below, as well as n (size of
   7 0000           ; array x) and k (a constant).  The program traverses the array and
   8 0000           ; adds k to each element
   9 0000           
  10 0000           ;   i := 0
  11 0000           ;   while i &lt; n do
  12 0000           ;     x[i] := x[i] + k
  13 0000           ;     i := i+1
  14 0000           
  15 0000           ; Register usage
  16 0000           ;   R1 = i  loop counter
  17 0000           ;   R2 = 1  constant for incrementing loop counter
  18 0000           ;   R3 = n  size of array
  19 0000           ;   R4 = k  constant to add to elements
  20 0000           ;   R5      temporary
  21 0000           
  22 0000           ; Initialisation
  23 0000 f100 0000       lea    R1,0[R0]     ; i := 0
  24 0002 f200 0001       lea    R2,1[R0]     ; R2 := 1
  25 0004 f301 0015       load   R3,n[R0]     ; R3 := n
  26 0006 f401 0014       load   R4,k[R0]     ; R4 := k
  27 0008           
  28 0008 4013      loop  cmp    R1,R3        ; compare i with n
  29 0009 f404 0013       jumpge done[R0]     ; if not (i &lt; n) then goto done
  30 000b f511 0016       load   R5,x[R1]     ; R5 := x[i]
  31 000d 0554            add    R5,R5,R4     ; R5 := x[i] + k
  32 000e f512 0016       store  R5,x[R1]     ; x[i] := x[i] + k
  33 0010 0112            add    R1,R1,R2     ; i := i + 1
  34 0011 f003 0008       jump   loop[R0]     ; goto loop
  35 0013           
  36 0013 c000      done  trap   R0,R0,R0     ; terminate the program
  37 0014           
  38 0014 0007      k     data    7   ; value to add to elements
  39 0015 0005      n     data    5   ; size of array x
  40 0016 0011      x     data   17   ; expected new value =  24 (0018)
  41 0017 0017            data   23   ; expected new value =  30 (001e)
  42 0018 03d5            data  981   ; expected new value = 988 (03dc)
  43 0019 fff7            data   -9   ; expected new value =  -2 (fffe)
  44 001a 004c            data   76   ; expected new value =  83 (0053)
  45 001b           

<span class='ListingHeader'>Symbol table</span>
<span class='ListingHeader'>Name        Val Org Mov  Def Used</span>
done       0013 Loc Rel   36  29
k          0014 Loc Rel   38  26
loop       0008 Loc Rel   28  34
n          0015 Loc Rel   39  25
x          0016 Loc Rel   40  30,32